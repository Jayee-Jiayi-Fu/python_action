以下是本章要点知识总结。
（1）语言基础知识
· 类与实例的数据，都保存在一个名为__dict__的字典属性中
· 灵活利用__dict__属性，能帮你做到常规做法难以完成的一些事情
· 使用@classmethod可以定义类方法，类方法常用作工厂方法
· 使用@staticmethod可以定义静态方法，静态方法不依赖实例状态，是一种无状态方法
· 使用@property可以定义动态属性对象，该属性对象的获取、设置和删除行为都支持自定义

（2）面向对象高级特性
· Python使用MRO算法来确定多重继承时的方法优先级
· super()函数获取的并不是当前类的父类，而是当前MRO链条里的下一个类
· Mixin是一种基于多重继承的有效编程模式，用好Mixin需要精心的设计
· 元类的功能相当强大，但同时也相当复杂，除非开发一些框架类工具，否则你极少需要使用元类
· 元类有许多更简单的替代品，比如类装饰器、子类化钩子方法等
· 通过定义__init_subclass__钩子方法，你可以在某个类被继承时执行自定义逻辑

(3）鸭子类型与抽象类
· “鸭子类型”是Python语言最为鲜明的特点之一，在该风格下，一般不做任何严格的类型检查
· 虽然“鸭子类型”非常实用，但是它有两个明显的缺点——缺乏标准和过于隐式
· 抽象类提供了一种更灵活的子类化机制，我们可以通过定义抽象类来改变isinstance()的行为
· 通过@abstractmethod装饰器，你可以要求抽象类的子类必须实现某个方法

(4）面向对象设计
· 继承提供了相当强大的代码复用机制，但同时也带来了非常紧密的耦合关系
· 错误使用继承容易导致代码失控
· 对事物的行为而不是事物本身建模，更容易孵化出好的面向对象设计
· 在创建继承关系时应当谨慎。用组合来替代继承有时是更好的做法


(5）函数与面向对象的配合
· Python里的面向对象不必特别纯粹，假如用函数打一点儿配合，你可以设计出更好的代码
· 可以像requests模块一样，用函数为自己的面向对象模块实现一些更易用的API·
 在Python中，我们极少会应用真正的“单例模式”，大多数情况下，一个简单的模块级全局对象就够了
 · 使用“预绑定方法模式”，你可以快速为普通实例包装出类似普通函数的API

 (6）代码编写细节
 · Python的成员私有协议并不严格，如果你想标示某个属性为私有，使用单下划线前缀就够了
 · 编写类时，类方法排序应该遵循某种特殊规则，把读者最关心的内容摆在最前面
 · 多态是面向对象编程里的基本概念，同时也是最强大的思维工具之一
 · 多态可能的介入时机：许多类似的条件分支判断、许多针对类型的isinstance()判断