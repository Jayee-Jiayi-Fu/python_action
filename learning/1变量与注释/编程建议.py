# 1. 保持变量的一致性: ：与类型一致性。
# 1.1 名字一致性:在同一个项目（或者模块、函数）中，对一类事物的称呼不要变来变去
# 1.2 不要把同一个变量重复指向不同类型的值


# 2. 变量定义尽量靠近使用
# 一种很不好的习惯——喜欢把所有变量初始化定义写在一起，放在函数最前面.它的可读性不会得到任何提升，反而会变差。
# 谨记：总是从代码的职责出发，而不是其他东西。
# 通过把变量定义移动到每段“各司其职”的代码头部，缩短变量从初始化到被使用的“距离”。当读者阅读代码时，可以更容易理解代码的逻辑


# 3. 定义临时变量提升可读性
# 直接翻译业务逻辑的代码，大多不是好代码。
# 优秀的程序设计需要在理解原需求的基础上，恰到好处地抽象，
# 抽象有许多种方式，比如定义新函数、定义新类型，“定义一个临时变量”。


# 4. 同一作用域内不要有太多变量
# 要减少函数里的变量数量，最直接的方式是给这些变量分组，建立新的模型
"""对局部变量分组建模
class ImportedSummary:
    # 保存导入结果摘要的数据类

    def __init__(self):
        self.succeed_count = 0
        self.failed_count = 0
"""
# 把复杂函数拆分为多个小函数，代码的整体复杂度才可能实现根本性的降低。


# 5. 能不定义变量就别定义
# 不必为了那些未来可能出现的变动，牺牲代码此时此刻的可读性。如果以后需要定义变量，那就以后再做吧


# 6. 不要使用locals()
# Python的一个内置函数，返回当前作用域中的所有局部变量
# Python之禅：显式优于隐式


# 7. 空行也是一种“注释”
# 适当地在代码中插入空行，把代码按不同的逻辑块分隔开，这样能有效提升代码的可读性。


# 8. 先写注释，后写代码
# 每个函数的名称与接口注释（也就是docstring）当成一种协助你设计函数的前置工具
# 另一个好处是：不会漏掉任何应该写的注释。
# 要养成这个习惯其实很简单：在写出一句有说服力的接口注释前，别写任何函数代码。