# 1. 主要起额外说明作用
# 最常见的代码内注释
# 用户输入可能有空格，使用strip去掉空格
#username = extract_username(input_string.strip())


# 另一种，函数（类）文档，也称接口注释。下面是最流行的 Sphinx 文档风格
class Person:
    '''人

    :param name: 姓名
    :param age: 年龄
    :param favorite_color: 最喜欢的颜色
    '''

    def __init__(self, name, age, favorite_color):
        self.name = name
        self.age = age
        self.favorite_color = favorite_color

# 常见错误1：用注释屏蔽代码
# 不需要的代码应该直接删掉，如果需要可以去Git仓库找

# 常见错误2：用注释复述代码
# 应该尽量提供那些读者无法从代码里读出来的信息
# 描述代码为什么要这么做，而不是简单复述代码本身
# 另一种常见注释“指引性注释”，简明扼要地概括代码功能，起到“代码导读”的作用，降低代码的认知成本
# 注意，判断何时该写注释，何时该将代码提炼为独立的函数（或方法）。

# 常见错误3：弄错接口注释的受众
# 不应过多阐述函数细节
# 接口文档主要是让函数（或类）的使用者不用逐行阅读函数代码，也能很快通过文档知道该如何使用这个函数，以及在使用时有什么注意事项。
# 应该站在函数设计者的角度，着重描述函数的功能、参数说明等
