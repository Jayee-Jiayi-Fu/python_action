'''
02 巧用next()函数

内置函数next()是构成迭代器协议的关键函数

next()的一些有趣用法，用很小代码达到意想不到的功能。
'''

'''
举个例子，假如有一个字典d，你要怎么拿到它的第一个key呢
直接调用d.keys()[0]是不行的，因为字典键不是普通的容器对象，不支持切片操作
为了获取第一个key，你必须把d.keys()先转换为普通列表才行
这么做有一个很大的缺点，那就是假如字典内容很多，list()操作需要在内存中构建一个大列表，内存占用大，执行效率也比较低。
'''
d = {'foo':1, 'bar':2}
first_key = list(d.keys())[0]


'''
假如使用next()，你可以更简单地完成任务
只要先用iter()获取一个d.keys()的迭代器，再对它调用next()就能马上拿到第一个元素。这样做不需要遍历字典的所有key，自然比先转换列表的方法效率更高。
'''
forst_key = next(iter(d.keys()))



'''
除此之外，在生成器对象上执行next()还能高效地完成一些元素查找类工作。

假设有一个装了非常多整数的列表对象numbers，我需要找到里面第一个可以被7整除的数字
'''
numbers = [3, 6, 8, 2, 21, 30, 42]

print(next(i for i in numbers if i %7 == 0))
